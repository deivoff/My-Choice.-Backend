map $http_user_agent $prerender_ua {
    default       0;
    "~*Prerender" 0;

    "~*googlebot"                               1;
    "~*yahoo!\ slurp"                           1;
    "~*bingbot"                                 1;
    "~*yandex"                                  1;
    "~*baiduspider"                             1;
    "~*facebookexternalhit"                     1;
    "~*twitterbot"                              1;
    "~*rogerbot"                                1;
    "~*linkedinbot"                             1;
    "~*embedly"                                 1;
    "~*quora\ link\ preview"                    1;
    "~*showyoubot"                              1;
    "~*outbrain"                                1;
    "~*pinterest\/0\."                          1;
    "~*developers.google.com\/\+\/web\/snippet" 1;
    "~*slackbot"                                1;
    "~*vkshare"                                 1;
    "~*w3c_validator"                           1;
    "~*redditbot"                               1;
    "~*applebot"                                1;
    "~*whatsapp"                                1;
    "~*flipboard"                               1;
    "~*tumblr"                                  1;
    "~*bitlybot"                                1;
    "~*skypeuripreview"                         1;
    "~*nuzzel"                                  1;
    "~*discordbot"                              1;
    "~*google\ page\ speed"                     1;
    "~*qwantify"                                1;
    "~*pinterestbot"                            1;
    "~*bitrix\ link\ preview"                   1;
    "~*xing-contenttabreceiver"                 1;
    "~*chrome-lighthouse"                       1;
    "~*telegrambot"                             1;
}

map $args $prerender_args {
    default $prerender_ua;
    "~(^|&)_escaped_fragment_=" 1;
}

map $http_x_prerender $x_prerender {
    default $prerender_args;
    "1"     0;
}

map $uri $prerender {
    default $x_prerender;
    "~*\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)" 0;
}

upstream my-choice-api {
    zone local 64k;
    server localhost:7001;
    keepalive 20;
}

server {
    listen 80;
    listen [::]:80;
    server_name www.xn--72-9kcd8arods1i.xn--p1ai xn--72-9kcd8arods1i.xn--p1ai;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name xn--72-9kcd8arods1i.xn--p1ai www.xn--72-9kcd8arods1i.xn--p1ai;
    access_log /var/log/nginx/moi-vibor-access.log;
    error_log /var/log/nginx/moi-vibor-error.log;
    root /var/www/moi-vibor.rf/frontend/build;
    index index.html;

    location / {
        if ($prerender = 1) {
            rewrite (.*) /prerenderio last;
        }

        try_files $uri /index.html = 404;
    }

    location /oauth/ {
        proxy_pass http://my-choice-api/oauth/;
    }

    location /assets {
        root /var/www/moi-vibor.rf/backend/dist;

        try_files $uri @static;
    }

    location /static {
        root /var/www/moi-vibor.rf/frontend/build;

        try_files $request_uri @static;
    }

    location @static {
        # disable cache
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since off;
        expires off;
        etag off;
        #try_files /home/user/my-choice/backend/dist/$uri $uri =404;
    }

    location /prerenderio {
        if ($prerender = 0) {
            return 404;
        }

        #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
        resolver 8.8.8.8 8.8.4.4;

        proxy_pass http://my-choice-api$request_uri;
        rewrite .* /$scheme://$host$request_uri? break;
    }

    location /graphql {
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_pass http://my-choice-api/graphql;
    }

    ssl_certificate /etc/letsencrypt/live/xn--72-9kcd8arods1i.xn--p1ai/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/xn--72-9kcd8arods1i.xn--p1ai/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}
